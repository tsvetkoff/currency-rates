/*
 * This file is generated by jOOQ.
 */
package tsvetkoff.currencyrates.jooq.main.public_.tables.records;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import tsvetkoff.currencyrates.jooq.main.public_.tables.Rate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RateRecord extends UpdatableRecordImpl<RateRecord> implements Record6<UUID, String, String, OffsetDateTime, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.rate.id</code>.
     */
    public RateRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.rate.bank</code>.
     */
    public RateRecord setBank(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.bank</code>.
     */
    public String getBank() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.rate.currency</code>.
     */
    public RateRecord setCurrency(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.currency</code>.
     */
    public String getCurrency() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.rate.date</code>.
     */
    public RateRecord setDate(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.date</code>.
     */
    public OffsetDateTime getDate() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.rate.purchase</code>.
     */
    public RateRecord setPurchase(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.purchase</code>.
     */
    public BigDecimal getPurchase() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.rate.sale</code>.
     */
    public RateRecord setSale(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.rate.sale</code>.
     */
    public BigDecimal getSale() {
        return (BigDecimal) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, OffsetDateTime, BigDecimal, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<UUID, String, String, OffsetDateTime, BigDecimal, BigDecimal> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Rate.RATE.ID;
    }

    @Override
    public Field<String> field2() {
        return Rate.RATE.BANK;
    }

    @Override
    public Field<String> field3() {
        return Rate.RATE.CURRENCY;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Rate.RATE.DATE;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Rate.RATE.PURCHASE;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Rate.RATE.SALE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getBank();
    }

    @Override
    public String component3() {
        return getCurrency();
    }

    @Override
    public OffsetDateTime component4() {
        return getDate();
    }

    @Override
    public BigDecimal component5() {
        return getPurchase();
    }

    @Override
    public BigDecimal component6() {
        return getSale();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getBank();
    }

    @Override
    public String value3() {
        return getCurrency();
    }

    @Override
    public OffsetDateTime value4() {
        return getDate();
    }

    @Override
    public BigDecimal value5() {
        return getPurchase();
    }

    @Override
    public BigDecimal value6() {
        return getSale();
    }

    @Override
    public RateRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public RateRecord value2(String value) {
        setBank(value);
        return this;
    }

    @Override
    public RateRecord value3(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public RateRecord value4(OffsetDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public RateRecord value5(BigDecimal value) {
        setPurchase(value);
        return this;
    }

    @Override
    public RateRecord value6(BigDecimal value) {
        setSale(value);
        return this;
    }

    @Override
    public RateRecord values(UUID value1, String value2, String value3, OffsetDateTime value4, BigDecimal value5, BigDecimal value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RateRecord
     */
    public RateRecord() {
        super(Rate.RATE);
    }

    /**
     * Create a detached, initialised RateRecord
     */
    public RateRecord(UUID id, String bank, String currency, OffsetDateTime date, BigDecimal purchase, BigDecimal sale) {
        super(Rate.RATE);

        setId(id);
        setBank(bank);
        setCurrency(currency);
        setDate(date);
        setPurchase(purchase);
        setSale(sale);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RateRecord
     */
    public RateRecord(tsvetkoff.currencyrates.jooq.main.public_.tables.pojos.Rate value) {
        super(Rate.RATE);

        if (value != null) {
            setId(value.getId());
            setBank(value.getBank());
            setCurrency(value.getCurrency());
            setDate(value.getDate());
            setPurchase(value.getPurchase());
            setSale(value.getSale());
            resetChangedOnNotNull();
        }
    }
}
