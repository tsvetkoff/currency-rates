/*
 * This file is generated by jOOQ.
 */
package tsvetkoff.currencyrates.jooq.main.public_;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import tsvetkoff.currencyrates.jooq.main.public_.tables.Bank;
import tsvetkoff.currencyrates.jooq.main.public_.tables.Currency;
import tsvetkoff.currencyrates.jooq.main.public_.tables.Rate;
import tsvetkoff.currencyrates.jooq.main.public_.tables.records.BankRecord;
import tsvetkoff.currencyrates.jooq.main.public_.tables.records.CurrencyRecord;
import tsvetkoff.currencyrates.jooq.main.public_.tables.records.RateRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BankRecord> BANK_PKEY = Internal.createUniqueKey(Bank.BANK, DSL.name("bank_pkey"), new TableField[] { Bank.BANK.ID }, true);
    public static final UniqueKey<CurrencyRecord> CURRENCY_PKEY = Internal.createUniqueKey(Currency.CURRENCY, DSL.name("currency_pkey"), new TableField[] { Currency.CURRENCY.ID }, true);
    public static final UniqueKey<RateRecord> RATE_BANK_CURRENCY_DATE_KEY = Internal.createUniqueKey(Rate.RATE, DSL.name("rate_bank_currency_date_key"), new TableField[] { Rate.RATE.BANK, Rate.RATE.CURRENCY, Rate.RATE.DATE }, true);
    public static final UniqueKey<RateRecord> RATE_PKEY = Internal.createUniqueKey(Rate.RATE, DSL.name("rate_pkey"), new TableField[] { Rate.RATE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RateRecord, BankRecord> RATE__RATE_BANK_FKEY = Internal.createForeignKey(Rate.RATE, DSL.name("rate_bank_fkey"), new TableField[] { Rate.RATE.BANK }, Keys.BANK_PKEY, new TableField[] { Bank.BANK.ID }, true);
    public static final ForeignKey<RateRecord, CurrencyRecord> RATE__RATE_CURRENCY_FKEY = Internal.createForeignKey(Rate.RATE, DSL.name("rate_currency_fkey"), new TableField[] { Rate.RATE.CURRENCY }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
}
