/*
 * This file is generated by jOOQ.
 */
package tsvetkoff.currencyrates.jooq.main.public_.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import tsvetkoff.currencyrates.jooq.main.public_.Keys;
import tsvetkoff.currencyrates.jooq.main.public_.Public;
import tsvetkoff.currencyrates.jooq.main.public_.tables.records.RateRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rate extends TableImpl<RateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rate</code>
     */
    public static final Rate RATE = new Rate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RateRecord> getRecordType() {
        return RateRecord.class;
    }

    /**
     * The column <code>public.rate.id</code>.
     */
    public final TableField<RateRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.rate.bank</code>.
     */
    public final TableField<RateRecord, String> BANK = createField(DSL.name("bank"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.rate.currency</code>.
     */
    public final TableField<RateRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.rate.date</code>.
     */
    public final TableField<RateRecord, OffsetDateTime> DATE = createField(DSL.name("date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.rate.purchase</code>.
     */
    public final TableField<RateRecord, BigDecimal> PURCHASE = createField(DSL.name("purchase"), SQLDataType.NUMERIC(20, 4), this, "");

    /**
     * The column <code>public.rate.sale</code>.
     */
    public final TableField<RateRecord, BigDecimal> SALE = createField(DSL.name("sale"), SQLDataType.NUMERIC(20, 4), this, "");

    private Rate(Name alias, Table<RateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rate(Name alias, Table<RateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rate</code> table reference
     */
    public Rate(String alias) {
        this(DSL.name(alias), RATE);
    }

    /**
     * Create an aliased <code>public.rate</code> table reference
     */
    public Rate(Name alias) {
        this(alias, RATE);
    }

    /**
     * Create a <code>public.rate</code> table reference
     */
    public Rate() {
        this(DSL.name("rate"), null);
    }

    public <O extends Record> Rate(Table<O> child, ForeignKey<O, RateRecord> key) {
        super(child, key, RATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RateRecord> getPrimaryKey() {
        return Keys.RATE_PKEY;
    }

    @Override
    public List<UniqueKey<RateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RATE_BANK_CURRENCY_DATE_KEY);
    }

    @Override
    public List<ForeignKey<RateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RATE__RATE_BANK_FKEY, Keys.RATE__RATE_CURRENCY_FKEY);
    }

    private transient Bank _bank;
    private transient Currency _currency;

    /**
     * Get the implicit join path to the <code>public.bank</code> table.
     */
    public Bank bank() {
        if (_bank == null)
            _bank = new Bank(this, Keys.RATE__RATE_BANK_FKEY);

        return _bank;
    }

    /**
     * Get the implicit join path to the <code>public.currency</code> table.
     */
    public Currency currency() {
        if (_currency == null)
            _currency = new Currency(this, Keys.RATE__RATE_CURRENCY_FKEY);

        return _currency;
    }

    @Override
    public Rate as(String alias) {
        return new Rate(DSL.name(alias), this);
    }

    @Override
    public Rate as(Name alias) {
        return new Rate(alias, this);
    }

    @Override
    public Rate as(Table<?> alias) {
        return new Rate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(String name) {
        return new Rate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(Name name) {
        return new Rate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rate rename(Table<?> name) {
        return new Rate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, OffsetDateTime, BigDecimal, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
